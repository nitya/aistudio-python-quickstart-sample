{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quickstart - Python SDK","text":"<p>Azure AI Studio is currently In Preview</p> <p>Preview versions are provided without a service level agreement, and they are not recommended for production workloads. Certain features might not be supported or might have constrained capabilities. For more information, see Supplemental Terms of Use for Microsoft Azure Previews.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<p>This repository contains the starter code and step-by-step quickstart tutorial for building a copilot with your own data, using the Azure AI Studio preview and related tooling ecosystem. By the end of this exercise, you should be familiar with the following tools and their usage for building a RAG-based LLM application and deploying it to Azure.</p> <ul> <li>Azure AI Studio - build, evaluate &amp; deploy AI solutions from one space.</li> <li>Azure AI services - AI models &amp; APIs accessible from Azure AI Studio.</li> <li>Azure AI SDK - access to Azure AI services from code (programmatic).</li> <li>Azure AI CLI - access to Azure AI services from command-line (shell).</li> </ul>"},{"location":"#what-youll-build","title":"What You'll Build","text":"<p>In this quickstart sample you'll build a enterprise copilot app, using a Retrieval Augmented Generation pattern to ground the chat agent's responses in your company's data and APIs. The sample is not meant for production use, but as a starting point for you to explore further customization of features and functionality, to support your own application requirements.</p> <p>Follow the steps in our quickstart tutorial to learn how to:</p> <ul> <li>Setup Environment: for development, using pre-built or custom options</li> <li>Provision Azure: create Azure AI resources and project to build the copilot</li> <li>Provision Data: create an Azure Search index containing product information</li> <li>Run Copilot: test your copilot with a sample question to validate operation</li> <li>Evaluate Metrics: assess copilot quality using relevant metrics</li> </ul> <p>In the process, you'll learn to use three tools that form the basis of the Azure AI Platform.</p> <ul> <li>Azure AI Studio - For browser-based interactions with the Azure AI platform.</li> <li>Azure AI CLI - For commandline interactions with the Azure AI platform.</li> <li>Azure AI SDK - For code-based interactions with the Azure AI platform.</li> </ul> <p>Plus, you'll learn to use the Azure AI CLI to simplify your setup process. And you'll learn to use the Azure AI SDK (from Python code or from Jupyter Notebooks) to interact programmatically with the Azure AI Platform (during development), and with your copilot (on deployment).</p> <p>THIS IS NOT A PRODUCTION SAMPLE</p> <p>We do not guarantee the quality of responses produced by this sample copilot or promote its suitability for use in your real-world production deployments. The copilot responses may vary over time as features and functionality of various components evolves. You must perform your own evaluation of copilot response quality to assess suitabilty for your specific use case or solution integration if you choose to repurpose the sample.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Building the copilot requires setting up a few tools, libraries and extensions for the Azure AI and Visual Studio Code development environments. The quickest way to get started is to use our pre-build development container which does all of this for you behind the scenes. Just log into GitHub and click the button below to launch GitHub Codespaces. </p> <p></p> <p>Re-open this file in the Visual Studio Code session in that environment. You can now continue the quickstart by picking one of the options below:</p> <ul> <li> Introduction - start here to get introduced to project &amp; technologies.</li> <li> Dev Environment - start here to dive straight into application development.</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<p>This sample taught you to build a Copilot With Your Data - using the Azure AI SDK (Python) and CLI. The process involves a number of steps that we managed manually. When building more complex solutions in production, we can benefit from using orchestration tools to streamline our end-to-end development. </p> <p>Explore Advanced Azure AI Studio Samples</p> <p>Try these advanced samples and learn to build the copilot using popular frameworks with the Azure AI SDK.</p> <ol> <li>Build a Copilot With Your Data - using Semantic Kernel</li> <li>Build a Copilot With Your Data - using Prompt Flow</li> <li>Build a Copilot With Your Data - using LangChain</li> </ol> <p>Next Up: Preview Docs In Browser</p>"},{"location":"00-preview/","title":"Docs Preview \ud83c\udd95","text":"<p>This Feature Is Optional</p> <p>The documentation for this tutorial is written completely in standard Markdown and should be easy to read and view right in your Visual Studio Code editor or GitHub repository browser page with no additional tools required. However, having docs in a separate preview tab from your code editor can help quick lookups. Preview also supports dark/light modes and integrated search capability.</p>"},{"location":"00-preview/#material-for-mkdocs","title":"Material For MkDocs","text":"<p>To support this, we're using Material For MkDocs to create a docs preview site. This involves 2 changes to repository (below) but does not change the markdown content or structure.</p> <ol> <li><code>mkdocs.yml</code> in root folder. Configures mkdocs features, look and feel. Currently looks for markdown files in docs dir (default) with an index.md for the homepage.</li> <li><code>mkdocs-material</code> in requirements.txt Installs the required Python package to help you build and preview the site in your browser on-demand.</li> </ol> <p>We are however using some enhanced-Markdown capabilities from MkDocs like Admonitions (see the example box at the top of this page) that can help higlight key sections or context.</p>"},{"location":"00-preview/#verify-installation","title":"Verify Installation","text":"<ol> <li> <p>First check if you have <code>mkdocs</code> installed successfully in your environment, with this command. It should print out a valid version if installed.</p> <pre><code>mkdocs --version\n</code></pre> </li> <li> <p>If not installed, install it now with pip as shown, then check again to see if installed.</p> <pre><code>pip install mkdocs-material\n</code></pre> </li> </ol>"},{"location":"00-preview/#launch-preview","title":"Launch Preview","text":"<p>Now, preview docs by using the following command in a terminal, from the root folder.</p> <pre><code>mkdocs serve\n</code></pre> <p>The home page should look like this. The theme supports a dark/light mode toggle so you can switch between the two options below.</p> <p>DOCS PREVIEW | DARK MODE</p> <p></p> <p>DOCS PREVIEW | LIGHT  MODE</p> <p></p>"},{"location":"00-preview/#search-docs","title":"Search Docs","text":"<p>You should also be able to search the docs directly from the preview page as shown.</p> <p>DOCS SEARCH | LIGHT  MODE</p> <p></p> <p>Next Up: Let's Get Started with the Introduction</p>"},{"location":"01-start/","title":"01 | Introduction","text":"<p>Azure AI Studio is currently In Preview</p> <p>Preview versions are provided without a service level agreement, and they are not recommended for production workloads. Certain features might not be supported or might have constrained capabilities. For more information, see Supplemental Terms of Use for Microsoft Azure Previews.</p>"},{"location":"01-start/#learning-objectives","title":"Learning Objectives","text":"<p>This tutorial walks you through the process of creating a copilot enterprise chat UI using custom Python code to ground copilot responses in your company data and APIs. By completing these steps, you'll also gain familiarity with the core features and functionality available in the Azure AI Studio preview, Azure AI CLI and Azure AI SDK for Python. </p> <p>By the end of this lab, you should have learned how to:</p> <ol> <li>Setup your dev environment - using prebuilt dev containers.</li> <li>Provision your Azure AI resources - using Azure AI CLI <code>ai init</code> command.</li> <li>Populate your Data &amp; Indexes - using Azure AI CLI <code>ai search</code> command.</li> <li>Test your Copilot with a question - using Azure AI SDK for Python.</li> <li>Evaluate your Copilot with metrics - using chatgpt to compare results.</li> <li>Deploy your Copilot to Azure - and use the endpoint in your own apps.</li> </ol> <p>Treat this sample as a starting point for your exploration. Once you've got the basic Copilot deployed, try modifying the data or adding new features, to adapt it to your own scenario.</p>"},{"location":"01-start/#pre-requisites","title":"Pre-Requisites","text":"<p>You will need the following to complete this tutorial:</p> <ol> <li>An Azure subscription - Create one for free</li> <li>Access to Azure OpenAI - Request access here</li> <li>A GitHub account - Create one for free</li> <li>Access to GitHub Codespaces - Free quota should be sufficient</li> </ol> <p>We assume you have familiarity with the following:</p> <ol> <li>Programming: Python and Jupyter Notebooks</li> <li>Editor: Visual Studio Code and Extensions</li> <li>Azure: Cloud Computing Concepts, Azure Portal </li> <li>AI/ML: Fundamental Concepts, LLM, Generative AI</li> </ol>"},{"location":"01-start/#bring-your-data","title":"Bring Your Data","text":"<p>This tutorial builds a copilot for a fictional company (Contoso Outdoors) that sells camping and hiking gear to outdoor adventuring enthusiasts. The <code>data/</code> folder has sample records for:</p> <ul> <li>product-info - 20 item of product catalog data</li> <li>customer-info  - 13 records or customer order history</li> <li>misc - policy information and other miscallaneous company data</li> <li>chat-history - conversation history with customers (for context)</li> </ul> <p>We use the data to ground our copilot responses. Once you have completed the sample, we encourage you to bring your own data (schemas and records) and try to adapt or extend the sample to suit your specific company data and application scenarios.</p> <p>Next Up: Learn Core Concepts</p>"},{"location":"02-technology/","title":"02 | Core Concepts","text":"<p>Lte's talk briefly about some of the core terms, concepts and technologies used in this quickstart tutorial. This is not a comprehensive coverage of the topics so check the Resources page for relevant documentation and training links.</p>"},{"location":"02-technology/#1-tools","title":"1. Tools","text":""},{"location":"02-technology/#11-azure-ai-studio","title":"1.1 Azure AI Studio","text":"<p>Azure AI Studio is a web-based UI that helps developers seamlessly explore, build, test, and deploy enterprise-grade generative AI applications using cutting-edge AI tools and ML models, grounded in responsible AI practices. It has three core value propositions:</p> <ul> <li>Explore - for discovery.  Browse models, services or solutions in the Azure AI platform.</li> <li>Build - for developers. Build and customize AI models &amp; AI solutions via code or UI.</li> <li>Manage - for admins. Oversee policy, billing, access control, infra usage etc.</li> </ul>"},{"location":"02-technology/#12-azure-ai-cli","title":"1.2  Azure AI CLI","text":"<p>The Azure AI CLI provides an command-line based tool to interact with the Azure AI platform with a rich set of capabilities that includes:</p> <ul> <li><code>ai init</code> - creation of the Azure AI resource (default or customized)</li> <li><code>ai dev</code> - configure environment variables for local dev environment</li> <li><code>ai service</code> - manage connections to Azure AI resources and services</li> <li><code>ai flow</code> - work with prompt flows from your local dev environment</li> <li><code>ai chat</code> - chat with your deployed copilot from local dev environment</li> <li><code>ai help</code> - get help with Azure AI CLI commands and options</li> </ul>"},{"location":"02-technology/#13-azure-ai-sdk","title":"1.3 Azure AI SDK","text":"<p>The Azure AI SDK is a family of packages that provide access to Azure AI services such as Azure OpenAI and Speech. The Azure AI Generative package is part this SDK and contains functionality (below) to support local development that you can optionally remove if unused.</p> <ul> <li><code>[index]</code> package to build indexes locally.</li> <li><code>[evaluate]</code> package to run evaluation &amp; calculate metrics locally.</li> <li><code>[promptflow]</code> package to develop locally with prompt flow connected to Azure AI project.</li> </ul>"},{"location":"02-technology/#2-terminology","title":"2. Terminology","text":""},{"location":"02-technology/#21-what-is-a-copilot","title":"2.1 What is a Copilot","text":"<p>A copilot is an application that uses modern AI and large language models (LLM) to assist you in completing complex cognitive tasks. </p> <p>In this particular tutorial, we are building a copilot that assists you in answering user questions about your company data, by using the Retrieval Augmented Generation (RAG) pattern  with your preferred LLM deployment endpoint.</p>"},{"location":"02-technology/#22-what-is-rag","title":"2.2 What is RAG?","text":"<p>Retrieval Augmented Generation (RAG) is a pattern where you augment the capability of the default Large Language Model (LLM) by adding an information retrieval system. This provides you more control over the data used by the LLM in generating responses to user \"questions\", allowing you to tailor copilot responses to reflect your company data and requirements.</p> <p></p> <p>The RAG pattern (shown above) maintains a data store with your custom data. When the copilot receives a user question, it retrieves data matching the question from this store. It then combines the user question with retrieved data to form the prompt sent to the LLM, helping ground the returned responses.</p> <p></p> <p>Searching and retrieving data quickly and accurately is critical. The RAG pattern achieves this by proactively maintaining search indexes (as shown above) to improve performance and accuracy.</p> <p>Azure AI provides an Index asset to use with RAG - where the asset knows where the index is stored, how to access it, what search modes it supports, whether it has vector search capability, what embedding model it uses for this, and more. Currently, Azure AI Search is the primary Index solution for Azure AI projects. | See: Retrieval Augmented Generation and Indexes</p>"},{"location":"02-technology/#23-what-is-vector-search","title":"2.3 What is Vector Search?","text":"<p>Vector search is an information retrieval approach using numeric representations of content for search scenarios. The search engine now matches on vectors that are the most similar to the query, without needing to match exact terms. This helps it power similarity search, multi-modal search, recommendations engines, or apps implementing the  Retrieval Augmented Generation (RAG) architecture.</p> <p>Vector search is available in Azure AI Search by default, and works as shown below. In this project, we use Azure AI Search to create a vector store for the product information data, then use Azure Open AI <code>text-embedding-ada-002</code> deployment for embedding data in vectors, for more efficient search and retrieval later. | See: Vector search in Azure AI Search.</p> <p></p>"},{"location":"02-technology/#3-azure-resources","title":"3. Azure Resources","text":"<p>As developers, we have three options for interacting with Azure AI services and models:</p> <ul> <li>Azure AI Studio - browser-based low-code approach.</li> <li>Azure AI CLI - terminal-based command-line approach.</li> <li>Azure AI SDK - editor-based code-first approach (Python &amp; Jupyter Notebooks)</li> </ul> <p>In this sample, we will primarily work with the Azure AI CLI and Azure AI SDK for developing our copilot solution. We'll use the Azure AI Studio primarily to verify the outcomes of our deployment. </p>"},{"location":"02-technology/#31-azure-ai-services","title":"3.1 Azure AI Services","text":"<p>Azure AI services help developers and organizations rapidly create intelligent, cutting-edge, market-ready, and responsible applications with out-of-the-box and pre-built and customizable APIs and models. Most Azure AI services can be accessed via API or SDK for code-first integrations. Browse the available Azure AI services to understand the range of capabilities.</p>"},{"location":"02-technology/#32-azure-ai-resource","title":"3.2 Azure AI Resource","text":"<p>The Azure AI Resource is the top-level resource required before you can start working on an AI Project. It provides the working environment for a team to plan and execute their solution from design to deployment. And it is typically used by the admin in the team to oversee access controls, billing and resource usage across the multiple AI projects it might be supporting.</p> <p>The Azure AI Resource will expose API endpoints and keys for any prebuilt AI services that you use in your AI solution. The default AI Resource configuration includes the Azure OpenAI, Content Safety, Speech, and Vision AI services - and makes them accessible via a common API key.</p>"},{"location":"02-technology/#33-azure-ai-project","title":"3.3 Azure AI Project","text":"<p>The Azure AI Project resource is used to organize your work and save state while building customized AI apps. Projects are hosted by an Azure AI resource that provides enterprise-grade security and a collaborative environment for the project team. Learn more about how to create an Azure AI Project using the Azure AI Studio (visually) or using the Azure AI CLI/SDK (programmatically).</p>"},{"location":"02-technology/#34-azure-ai-search","title":"3.4 Azure AI Search","text":"<p>Azure AI Search (formerly called Azure Cognitive Search) provides tools, APIs and infrastructure to support information retrieval at scale over heterogeneous data sources - for traditional and conversational search solutions. It is a proven solution for information retrieval in RAG architectures and can be accessed from Azure AI Studio, Azure AI SDK or Azure AI CLI. </p> <p>Next Up: Setup Development Environment</p>"},{"location":"03-dev-env/","title":"03 | Dev Environment","text":"<p>Azure AI Studio is currently In Preview</p> <p>Preview versions are provided without a service level agreement, and they are not recommended for production workloads. Certain features might not be supported or might have constrained capabilities. For more information, see Supplemental Terms of Use for Microsoft Azure Previews.</p> <p>For this project, we need a development environment with the following:</p> <ul> <li>A Python 3.x runtime (3.10 or higher) with all requirements.</li> <li>A Visual Studio Code editor with all required extensions.</li> <li>Azure AI CLI tooling (binary) for latest stable version.</li> </ul>"},{"location":"03-dev-env/#31-fork-the-sample","title":"3.1 Fork The Sample","text":"<p>Before you begin, we recommend you fork the sample repo into your own profile on GitHub. This is useful for two reasons:</p> <ol> <li>You keep a snapshot of the sample at this point in time, even as the main sample evolves. This lets you have a stable and familiar version that corresponds to your walkthrough,</li> <li>You can make changes to the code if you want to experiment on this later. For example, you may want to try adding your own data, or exploring new features.</li> </ol> <p>To fork the repo:</p> <ol> <li> <p>Visit Azure-Samples/aistudio-python-quickstart-sample. Click the Fork button:</p> <p></p> </li> <li> <p>Click Create Fork, select owner profile,  leave t default options unchanged.</p> <p></p> </li> </ol> <p>Congratulations \ud83c\udf89 - You have forked the sample to your profile!</p>"},{"location":"03-dev-env/#32-pick-a-setup-option","title":"3.2 Pick a Setup Option","text":"<p>To setup your development environment, use one of these three options:</p> <ol> <li>Pre-built, cloud VM - using GitHub Codespaces.</li> <li>Pre-built, local VM - using Docker Desktop.</li> <li>Manual, local OS - using your preferred environment.</li> </ol> <p>The repository is instrumented with a dev container configuration that creates a pre-built development environment in a Docker container, ready for your use. The first two options allow you to run this container - either in the cloud or on your local device. The final option lets you control the entire setup yourself, in your preferred environment or OS.</p> <p>We've documented the three options below from least-effort to most, for setup. Pick one.</p> <p>Recommended Option: Pre-built Container On GitHub Codespaces!</p> <p>The Azure AI Studio preview and related Azure AI SDK and Azure AI CLI are likely to evolve quickly to reflect changes and updates. We strongly recommend using the pre-built development environment option to minimize your effort in maintaining your local environment, to stay up-to-date with these changes.</p>"},{"location":"03-dev-env/#1-pre-built-container-cloud","title":"1 | Pre-built Container (Cloud)","text":"<p>Complete this section if you want to use the prebuilt option with GitHub Codespaces.</p> <ol> <li> <p>To get started, launch GitHub Codespaces by clicking the \"Code\" button in the repository UI, selecting the \"Codespaces\" tab - and then creating a new codespace. Previously created codespaces will be listed if active or available for resume.      </p> </li> <li> <p>The first time you launch the codespace, you will see a new tab open with something like this indicating that the Codespace (dev container) is being built. Clicking the <code>Show Logs</code> button in the output console will produce the detailed output shown below.     </p> </li> <li> <p>Once the build completes, you should see the tab refresh to show a Visual Studio Code editor in the browser, as shown below. The blue bar at the bottom left of the screen should show you the name of the running Github Codespaces instance.     </p> </li> <li> <p>If you refresh the repository page and view that 'Codespaces' tab again, you should see the same name show up as an active codespace for that repository.     </p> </li> </ol> <p>Congratulations \ud83c\udf89 - Your Codespaces is Ready!</p>"},{"location":"03-dev-env/#2-pre-built-container-device","title":"2 | Pre-built Container (Device)","text":"<p>Complete this section if you want to use the prebuilt option with Docker Desktop on your local device. This gives you the benefits of a pre-built environment but without using up your GitHub Codespaces quota.</p> <ol> <li>Install Docker Desktop. Follow these instructions to install Docker Desktop on your device.</li> <li> <p>Clone the forked repository to your local device, then open the repository in Visual Studio Code. Follow these instructions open the folder in a container in Docker Desktop. The container takes a few minutes to build. You should then see something like this. Note the green icon (bottom left) shows a <code>Dev Container</code> label, not a GitHub Codespace name.</p> <p></p> </li> </ol> <p>Congratulations \ud83c\udf89 - You're local Dev Container is ready!</p>"},{"location":"03-dev-env/#3-manual-setup-device","title":"3 | Manual Setup (Device)","text":"<p>This option is provided for completeness, but we do not recommend it unless you are an advanced user willing to tradeoff complexity (maintenance) for control (customized env). You will now be accountable for making related updates to keep in sync with changes to the Azure AI Studio, CLI, SDK or codebase. If you go this route, we recommend using a managed virtual environment (<code>venv</code> or <code>conda</code>) to prevent conflicts with other Python development environments you have on your local device. </p> <ol> <li> <p>Install and activate a virtual environment. Follow guidance on \"How to get started with the Azure AI SDK\" to install your preferred virtual environment (venv or conda) and activate it. You will need <code>Python 3.10 or higher</code> to use the Azure AI SDK.</p> </li> <li> <p>Install the Azure AI SDK. Use this command to install dependencies in <code>requirements.txt</code>. </p> <p><pre><code>pip install -r requirements.txt\n</code></pre> 3. Install the Azure AI CLI. This step depends on your device operating system. Use the command below if you are on a Linux (e.g, Ubuntu) environment. If you are on a Windows or macOS machine, follow these instrucutions instead. <pre><code>curl -sL https://aka.ms/InstallAzureAICLIDeb | sudo bash\n</code></pre></p> </li> </ol> <p>Congratulations \ud83c\udf89 - You're local environment is ready!</p>"},{"location":"03-dev-env/#33-validate-your-setup","title":"3.3 Validate Your Setup","text":"<p>We assume you've completed one of the three options above to setup your development environment. Now, let's validate the setup by checking if the Azure AI CLI is installed. </p> <p><pre><code>ai help\n</code></pre> If setup correctly, you should see the help screen for the Azure AI CLI. as shown below. Hit  Esc  to exit the help screen and get back to your commandline prompt.</p> <p></p> <p>Congratulations \ud83c\udf89 - You've validated your dev environment!</p> <p>Next Up: Provision Azure Resources</p>"},{"location":"04-azure/","title":"04 | Provision Azure","text":"<p>Screenshots may not be exactly the same as your experience</p> <p>Screenshots were captured with a GitHub Codespaces environment, and may have been refreshed in different sections to reflect changes made to the codebase or updates to the tools. While the details may have small variations, the process and expected outcomes should remain consistent.</p> <p>In this step we'll setup the top-level Azure AI Resource and provision it with the required Azure AI Project, Azure OpenAI Service and Azure AI Search service capbilities, with a single command!!</p> <ol> <li> <p>Run the following command.</p> <pre><code>ai init\n</code></pre> <p>You should see an interactive wizard that walks you through the process of creating an Azure AI project and provisioning the required Azure AI resources. This can take a few minutes to complete. </p> </li> <li> <p>If you are not already logged into your Azure account, you will be prompted to do so at this time. Choose the interactive option.</p> <p></p> </li> </ol> <p>You will be given a code to enter in a browser to complete the authentication flow. If successful, you should see this message. Return to the terminal to continue the init process. </p> <pre><code>![Az Login](./img/07-az-signedin.png)\n</code></pre> <ol> <li> <p>Next, you will be prompted to create the Azure AI Resources for the project you are setting up. The process will include setting up a resource group and Azure AI project resource, then adding a new Azure Oen AI Deployment (Chat model) including the region and OpenAI model deployments for chat (<code>gpt-35-turbo-16k-0613</code>) and embeddings (<code>text-embedding-ada-002-2</code>).</p> <p></p> </li> <li> <p>Next, you will be prompted to create the Azure AI Search resource - I opted to have this be created in the same region as the other resources, and associated with the same resource group for convenience. You should now see a <code>config.json</code> file created with the following properties, with values set by your project.</p> <pre><code>{\n    \"subscription_id\": \"your_subscription_id\",\n    \"resource_group\": \"your_resource_group\",\n    \"project_name\": \"your_project_name\"\n}\n</code></pre> </li> <li> <p>Your Azure AI Project is ready. Visit Azure AI Studio and look under the <code>Manage</code> tab for the Azure AI resource created. Click to see details as shown below - including a handy link to the Azure Portal for additional actions and information.</p> <p></p> </li> </ol>"},{"location":"04-azure/#next-steps","title":"Next Steps","text":"<p>\ud83d\udfe9 Congratulations! Our Azure AI project is ready. Now, it's time to build the Azure AI Search index for our product data, and use it for Retrieval Augmented Generation in our copilot.</p> <p>Next Up: Populate Data &amp; Indexess</p>"},{"location":"05-search/","title":"05 | Provision Search","text":""},{"location":"05-search/#step-3-build-an-azure-search-index","title":"Step 3: Build an Azure Search index","text":"<p>In this step, we'll use the Azure AI CLI to build an Azure Search index for our product data. This index will then be used by our copilot to retrieve relevant information and create an augmented prompt that can be used by the targeted LLM to generate a more relevant response to the user question.</p> <p>[!NOTE] For our tutorial, we'll use the sample data in the <code>./data/3-product-info/</code> folder. This currently has a catalog of items in categories like \"Tents\", \"Sleeping Bags\", \"Hiking Footwear\", \"Hiking Clothing\", \"Backpacks\", and \"Camping Tables\". However, we encourage you to try the same steps with your own data next.</p> <ol> <li> <p>First, we'll create the Azure AI Search index for our custom product data and give it an index-name:     <pre><code>ai search index update --files \"./data/3-product-info/*.md\" --index-name \"product-info\"\n</code></pre>     On successful completion of this step, your terminal output should show something like this:     </p> </li> <li> <p>Next, use the Azure AI CLI to generate the <code>.env</code> file with required environment variables using the following command.</p> <p><pre><code>ai dev new .env\n</code></pre> On successful completion of this step, your terminal output should show something like this: </p> <p>The <code>.env.sample</code> file shows the list of environment variables that need to be configured by this process. These variables are then used by the Azure AI SDK and Azure AI CLI, for configuring clients to interact with the copilot implementation and Azure AI resources.</p> </li> </ol>"},{"location":"05-search/#next-steps","title":"Next Steps","text":"<p>\ud83d\udfe9 Congratulations!! </p> <p>You now have an Azure AI project with an Azure AI Search index using your custom data, and a copilot that can use Retrieval Augmented Generation to generate a more relevant response to user questions.</p> <p>Now, it's time to test our copilot with a sample question that relates to the custom data we used for building the index.</p> <p>Next Up: Test Copilot With A Question</p>"},{"location":"06-copilot/","title":"06 | Run Your Copilot","text":"<p>TODO: Validate these work with the latest CLI</p>"},{"location":"06-copilot/#step-4-run-the-co-pilot-with-a-sample-question","title":"Step 4: Run the co-pilot with a sample question","text":"<p>[!NOTE] You can interact with the copilot using the Azure AI CLI (from commandline) or the Azure AI SDK (from Python code or Jupyter notebooks). Let's explore all three.</p>"},{"location":"06-copilot/#1-using-azure-ai-cli","title":"1. Using Azure AI CLI","text":"<p>The Azure AI CLI has an <code>ai chat</code> command that allows you to interact with the copilot. Once you have initialized resources and have a deployment, use <code>ai chat</code> to engage interactively or non-interactively with the copilot. </p> <p>You can chat with your data or chat with a function for more grounded or custom chat experiences. Use <code>ai chat help</code> to see available options or browse the documentation for details. </p> <p>Let's look at some examples.</p> <ol> <li> <p>Example of a non-interactive chat. We'll use the <code>--user</code> option to ask the copilot a simple question.</p> <pre><code>ai chat --user \"What products do you have? Give me name, price and 1 sentence descriptions for each\"\n</code></pre> <p></p> </li> <li> <p>Example of interactive chat. This sets up a conversation with the copilot that maintains context. Use <code>exit</code> to exit the chat.</p> <p><pre><code>ai chat --interactive\n</code></pre> </p> </li> <li> <p>Example of a \"chat with function\" capability. This allows us to define and use a tailored function to interact with the copilot.</p> <p><pre><code>ai chat --interactive --function src/copilot_aisdk/chat:chat_completion\n</code></pre> </p> </li> </ol>"},{"location":"06-copilot/#2-using-azure-ai-sdk-python-code","title":"2. Using Azure AI SDK - Python Code","text":"<p>The <code>src/copilot_aisdk/chat.py</code> defines two functions using the Azure AI SDK, that effectively represent our copilot 'with custom data' implementation.  - <code>get_documents</code> generates a vector embedding of the user question, then uses the Azure AI Search client to retrieve documents relevant to it.  - <code>chat_completion</code> uses the Azure OpenAI chat deployment endpoint with the document-enhanced question, to get a more relevant res</p> <p>The <code>src/run.py</code> file provides two capabilities:  - It uses the Azure AI SDK to interact with Azure AI services (to create and manage resources) and with our copilot implementation (to ask user questions)  - It has a <code>main</code> function that can be used to invoke these functions based on commandline arguments. Use <code>src/run.py --help</code> to see available options.</p> <p>Let's ask our copilot a simple question using the <code>--question</code> option this provides, as follows:</p> <p><pre><code>python src/run.py --question \"which tent is the most waterproof?\"\n</code></pre> </p> <p>Try adding a <code>--stream</code> option and see what happens.</p> <p>(Hint: it will return a collection of objects, each with part of the response - allowing you to render that in chunks to simulate a more interactive chat experience for users.)</p>"},{"location":"06-copilot/#3-using-azure-ai-sdk-jupyter-notebook","title":"3. Using Azure AI SDK - Jupyter Notebook","text":"<p>We can also use the Azure AI SDK from Jupyter notebooks for a step-by-step learning experience that is ideal for exploration.</p> <p>[!NOTE] To execute code in a Jupyter notebook, we need a suitable kernel. The prebuilt dev container environment has a Python 3.10 kernel we'll use for this purpose, as shown below. For you own local environment follow this guidance to activate the right envorinment and kernel.</p> <ol> <li> <p>We've provided a sample notebook in <code>src/copilot_sdk/chat.ipynb</code>. Start by opening that in VS Code then click the <code>Select Kernel</code> button at top right to get the drop-down menu, then select Python Environments.</p> <p> </p> </li> <li> <p>Select the Python 3.10 environment (or higher) as your kernel in the drop-down</p> <p>  1. Check that the kernel is active (it should be shown in place of the <code>Select Kernel</code> button)</p> <p> 1. Now you can execute the notebook cells one by one, using the <code>Run Cell</code> button at the top right of each cell. Let's start by executing the first cell which asks a simple question but has Stream set to true.</p> <p>  1. The output cell will have an option to expand the output to see the full results. You should see something like this - showing how the response is streamed in chunks to allow us to render responses in an incremental, interactive way.</p> <p>  1. Next, try executing the second cell which asks a simple question but has Stream set to false. This is the non-interactive chat mode, returning a single response as shown.</p> <p> </p> </li> </ol> <p>You can now extend the notebook with more cells, each trying out copilot or Azure AI SDK functionality in an exploratory way.</p>"},{"location":"06-copilot/#next-steps","title":"Next Steps","text":"<p>\ud83d\udfe9 Congratulations!</p> <p>We've created a custom copilot based on our product data and validated its usage with a simple question from both Azure AI CLI and Azure AI SDK. </p> <p>Now, we need to evaluate how it performs in comparison to other applications like <code>chatgpt</code> by using a relevant evaluation dataset.</p> <p>Next Up: Evaluate Copilot Performance</p>"},{"location":"07-evaluate/","title":"07 | Evaluate Your Copilot","text":""},{"location":"07-evaluate/#step-5-evaluate-your-copilot-implementation","title":"Step 5: Evaluate your copilot implementation","text":"<p>How do we know if our copilot implementation is any good?  We can do this by evaluating our copilot performance with industry standard metrics to compare and choose the best version based on your need</p> <p>comparing it to other copilot implementations (like <code>chatgpt</code>), using a relevant evaluation dataset.</p> <p>We can evaluate our copilot using the Azure AI CLI or the Azure AI SDK.</p>"},{"location":"07-evaluate/#1-using-azure-ai-cli","title":"1. Using Azure AI CLI","text":"<p>The Azure AI CLI provides a <code>ai chat evaluate</code> command that you can use for bulk runs and other options as shown.</p> <p></p> <ol> <li> <p>Let's evaluate our \"chat with your data\" copilot implementation, using <code>evaluation_dataset.jsonl</code> as a test dataset. </p> <pre><code>ai chat evaluate --input-data src/tests/evaluation_dataset.jsonl\n</code></pre> <p></p> </li> <li> <p>You can also evaluate a \"chat with function\" copilot implementation, using <code>evaluation_dataset.jsonl</code> as a test dataset. </p> <p><pre><code>ai chat evaluate --input-data src/tests/evaluation_dataset.jsonl --function src/copilot_aisdk/chat:chat_completion\n</code></pre> </p> </li> </ol> <p>You can also revisit evaluation results anytime by visiting Azure AI Studio and navigating to the <code>Build</code> tab. Select your AI resource then look for the <code>Evaluation</code> section. The snapshot below shows you the metrics available in this view.</p> <p></p>"},{"location":"07-evaluate/#2-using-azure-ai-sdk","title":"2. Using Azure AI SDK","text":"<p>To learn how to run an evaluations using the Azure AI SDK, look at the implementation of the <code>run_evaluation</code> function definition under <code>src/run.py</code></p> <p>To execute this code on our default copilot, run the following command:</p> <p><pre><code>python src/run.py --evaluate\n</code></pre> The results will be displayed in the console as shown below, which can be hard to parse or recall later.</p> <p></p> <p>However, by visiting the Azure AI Studio panel, we can drill down into that specific evaluation run and see the results in a more visual way as shown below:</p> <p></p> <p>Take a few minutes to explore the Azure AI Studio interface and see what other metrics and features are available to you.</p>"},{"location":"07-evaluate/#next-steps","title":"Next Steps","text":"<p>\ud83d\udfe9 Congratulations! You just learned to evaluate your copilot implementation using the Azure AI CLI and the Azure AI SDK. And you learned where to find the results of your evaluation in Azure AI Studio.</p> <p>Now it's time to think about how to deploy your copilot implementation to Azure, so that it can be used by your users and applications.</p> <p>Next Up: Deploy Copilot To Azure</p>"},{"location":"08-deploy/","title":"08 | Deploy Your Copilot","text":""},{"location":"08-deploy/#step-6-deploy-the-copilot-to-azure","title":"Step 6: Deploy the copilot to Azure","text":"<p>The final step of our journey is to deploy our copilot implementation to an online endpoint on Azure, so that it can be used by your users and applications.</p> <p>[!NOTE] There is ongoing work to support a deploy capability from the Azure AI SDK and Azure AI CLI but this has not been tested in this sample. We will update this tutorial when this is available.</p> <p>In the meantime, please refer to the following documentation links to learn more about deployment options and try a simple tutorial to deploy a chat web app from Azure AI Studio.</p> <ul> <li>Tutorial: Deploy a chat web app - on your data.</li> <li>Deployments Overview - on Azure AI Studio</li> </ul>"},{"location":"08-deploy/#next-steps","title":"Next Steps","text":"<p>\ud83d\udd25 | Congratulations!!</p> <p>We made it to the end of our quickstart sample. Next, we'll recap what we covered and share tips &amp; resources to help you keep going.</p> <p>Next Up: Resourcs</p>"},{"location":"09-resources/","title":"09 | Learning Resources","text":"<p>Azure AI Studio is currently In Preview</p> <p>Preview versions are provided without a service level agreement, and they are not recommended for production workloads. Certain features might not be supported or might have constrained capabilities. For more information, see Supplemental Terms of Use for Microsoft Azure Previews.</p> <p>This page provides an evolving set of links to documentation, training, samples and other resources that may be helpful to self-guided learners on this journey. Check back often for updates since the platform capabilities and tools are evolving fast.</p>"},{"location":"09-resources/#azure-ai-documentation","title":"Azure AI Documentation","text":"<ol> <li>Azure AI Services - Pre-built AI services available for deployments (API key, endpoints)</li> <li>Azure AI Resource - Top-level resource to admin billing, access, policies, resource usage</li> <li>Azure AI Project - Resource to organize work &amp; save state when building AI solutions</li> <li>Azure AI SDK - Generative AI SDK, drive code-based interactions with Azure AI platform</li> <li>Azure AI CLI - .NET implementation, drive command-line interactions with Azure AI platform</li> <li>Azure AI Studio - UI, drive web-based interactions with  the Azure AI platform.</li> <li>Using vector search in Azure Cognitive Search - Tutorial.</li> <li>Deploy a web app for chat on your data - Tutorial.</li> <li>Moderate text and images with content safety in Azure AI Studio - Quickstart</li> </ol>"},{"location":"09-resources/#azure-ai-samples","title":"Azure AI Samples","text":"<p>Fork and explore these samples to get hands-on experience with the SDK and CLI in different contexts. Star the repo if you find it useful!</p> <ol> <li>Build a Copilot with Your Data - with Python SDK</li> <li>Build a Copilot with Your Data - using Promptflow</li> <li>Build a Copilot with Your Data - using LangChain</li> <li>Build a Copilot with Your Data - using Semantic Kernel</li> <li>Build a Production RAG - using PromptFlow, with LLM Ops</li> </ol>"},{"location":"09-resources/#openai-cookbook","title":"OpenAI Cookbook","text":"<p>The OpenAI Cookbook has example code and guides for accomplishing common tasks with the OpenAI API. Most code examples are written in Python but applicable to others. </p> <p>This collection includes the following Azure-centric samples:</p> <ol> <li>Azure OpenAI chat completions example - for: multi-turn, content filtering</li> <li>Azure OpenAI completions example - for: single prompt, content filtering</li> <li>Azure OpenAI embeddings example - for: converting nlp input to numerical representation.</li> <li>Azure OpenAI functions example - for:  function definition, function calling</li> <li>Azure OpenAI chat completion models with your own data (preview) - for:  RAG pattern</li> <li>Azure AI Search as vector database for OpenAI embeddings - for: similarity, hybrid, semantic</li> </ol> <p>The main concepts covered are:</p> <ul> <li>Completions - 'question-answer' text generation with {model, prompt} as inputs</li> <li>Chat Completion - 'multi-turn' text generation  with {model, messages} as inputs</li> <li>Embeddings - vector representation, meassures 'relatedness' (similarity) of text </li> <li>Functions - used to connect LLMs to external tools (convert NLP inputs into API calls)</li> </ul> <p>Messages: are defined by {role, content} where the role can be system (context), assistant (response) or user (question). Using the Chat Completions API is recommended (works with latest models) where a \"completion\" is effectively a single message containing a user question.</p> <p>Function Calling: where the function is a \"tool\" (code) that takes a string input (JSON), executes the call (to API), and returns the response as a string (JSON). Chat completion request has a \"tools\" argument to pass in relevant functions. The model can choose to call one or more functions which return response as a new \"message\" that model can use for summarizing results in its response.</p> <p>Embeddings: can be used for: search (ranking), clustering (topics), recommendations (items), anomaly detection )(outliers), diversity measurement (similairity), and classification (labels).</p> <p>Next Up: Summary &amp; Wrap-Ups</p>"},{"location":"10-summary/","title":"10 | Summary &amp; Wrap-Up","text":""},{"location":"10-summary/#clean-up","title":"\ud83d\udea8 | Clean up","text":"<p>[!WARNING] Once you have completed this tutorial, please remember to delete the Azure resource group and relevant resources to ensure you don't incur any unexpected charges. </p> <p>Note that you may need to delete the Azure AI project resource and Azure AI service resource separately, first, before you can delete the resource group.</p>"},{"location":"10-summary/#additional-tips-and-resources","title":"\ud83d\udca1 | Additional Tips and Resources","text":""},{"location":"10-summary/#explore-the-full-tutorial","title":"Explore the full tutorial","text":"<p>For a more detailed tutorial on this topic, you can follow the Build a co-pilot using the Azure AI SDK tutorial.</p>"},{"location":"10-summary/#customize-the-development-container","title":"Customize the development container","text":"<p>You can pip install packages into your development environment but they will disappear if you rebuild your container and need to be reinstalled (re-build is not automatic). You may want this, so that you can easily reset back to a clean environment. Or, you may want to install some packages by default into the container so that you don't need to re-install packages after a rebuild.</p> <p>To add packages into the default container, you can update the Dockerfile in <code>.devcontainer/Dockerfile</code>, and then rebuild the development container from the command palette by pressing <code>Ctrl/Cmd+Shift+P</code> and selecting the <code>Rebuild container</code> command.</p> <p>Next Up: Contributing &amp; Trademarks</p>"},{"location":"99-contributing/","title":"Want to Contribute?","text":"<p>Here are a few things you need to be aware of:</p>"},{"location":"99-contributing/#contributing","title":"Contributing","text":"<p>This project welcomes contributions and suggestions.  Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.</p> <p>When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You'll only need to do this once across all repos using our CLA.</p>"},{"location":"99-contributing/#code-of-conduct","title":"Code Of Conduct","text":"<p>This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.</p>"},{"location":"99-contributing/#trademarks","title":"Trademarks","text":"<p>This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft  trademarks or logos is subject to and must follow  Microsoft's Trademark &amp; Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.</p>"}]}